import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/admin_provider.dart';

class AddClientCodeDialog extends StatefulWidget {
  const AddClientCodeDialog({super.key});

  @override
  State<AddClientCodeDialog> createState() => _AddClientCodeDialogState();
}

class _AddClientCodeDialogState extends State<AddClientCodeDialog> {
  final _formKey = GlobalKey<FormState>();
  final _codeController = TextEditingController();
  
  String? _selectedClientId;
  bool _useAutoGenerated = true;
  bool _isLoading = false;

  @override
  void dispose() {
    _codeController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (_useAutoGenerated) {
      // Generate auto code
      await _generateAutoCode();
    } else {
      // Use custom code
      await _createCustomCode();
    }
  }

  Future<void> _generateAutoCode() async {
    setState(() => _isLoading = true);

    try {
      final code = await context.read<AdminProvider>().generateClientCode();

      if (code != null && mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Client code generated: $code'),
            backgroundColor: Colors.green,
          ),
        );
      } else if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Failed to generate client code'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _createCustomCode() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final codeData = {
        'client_id': _selectedClientId != null ? int.parse(_selectedClientId!) : null,
        'code': _codeController.text.trim(),
      };

      final success = await context.read<AdminProvider>().createClientCode(codeData);

      if (success && mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Client code created successfully'),
            backgroundColor: Colors.green,
          ),
        );
      } else if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Failed to create client code'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<AdminProvider>(
      builder: (context, provider, child) {
        return AlertDialog(
          title: const Text('Add Client Code'),
          content: SizedBox(
            width: 400,
            child: Form(
              key: _formKey,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Auto-generate vs Custom toggle
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        children: [
                          RadioListTile<bool>(
                            title: const Text('Auto-generate code'),
                            subtitle: const Text('System will generate a random code'),
                            value: true,
                            groupValue: _useAutoGenerated,
                            onChanged: (value) {
                              setState(() {
                                _useAutoGenerated = value!;
                              });
                            },
                          ),
                          RadioListTile<bool>(
                            title: const Text('Custom code'),
                            subtitle: const Text('Enter a custom code and assign to client'),
                            value: false,
                            groupValue: _useAutoGenerated,
                            onChanged: (value) {
                              setState(() {
                                _useAutoGenerated = value!;
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),

                  // Custom code fields (only shown when custom is selected)
                  if (!_useAutoGenerated) ...[
                    // Client Selection
                    DropdownButtonFormField<String>(
                      decoration: const InputDecoration(
                        labelText: 'Assign to Client (Optional)',
                        border: OutlineInputBorder(),
                      ),
                      value: _selectedClientId,
                      items: [
                        const DropdownMenuItem<String>(
                          value: null,
                          child: Text('No specific client'),
                        ),
                        ...provider.clients.map<DropdownMenuItem<String>>((client) {
                          return DropdownMenuItem<String>(
                            value: client['id'].toString(),
                            child: Text(client['name'] ?? 'Unknown Client'),
                          );
                        }),
                      ],
                      onChanged: (value) {
                        setState(() {
                          _selectedClientId = value;
                        });
                      },
                    ),
                    const SizedBox(height: 16),
                    
                    // Custom Code Input
                    TextFormField(
                      controller: _codeController,
                      decoration: const InputDecoration(
                        labelText: 'Client Code *',
                        border: OutlineInputBorder(),
                        hintText: 'Enter custom code (e.g., CUSTOM123)',
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Please enter client code';
                        }
                        if (value.trim().length < 3) {
                          return 'Code must be at least 3 characters';
                        }
                        return null;
                      },
                    ),
                  ],

                  if (_useAutoGenerated) ...[
                    const Card(
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Column(
                          children: [
                            Icon(Icons.auto_awesome, size: 48, color: Colors.blue),
                            SizedBox(height: 8),
                            Text(
                              'A random client code will be generated',
                              style: TextStyle(fontSize: 16),
                              textAlign: TextAlign.center,
                            ),
                            SizedBox(height: 8),
                            Text(
                              'The code can be assigned to a client later',
                              style: TextStyle(color: Colors.grey),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
              onPressed: _isLoading ? null : () => Navigator.of(context).pop(),
              child: const Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: _isLoading ? null : _submitForm,
              child: _isLoading
                  ? const SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : Text(_useAutoGenerated ? 'Generate Code' : 'Create Code'),
            ),
          ],
        );
      },
    );
  }
}